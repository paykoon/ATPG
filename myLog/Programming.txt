------2017.11.30-------
Read the main.cc of glucose, need to understand the function in Dimacs.h
readClause(in, S, lits); //********
S.addClause_(lits); }    //********

------2017.12.15-------

need to know the way to use the library of glucose

----2017.12.17-----
template<class B, class Solver>
static void readClause(B& in, Solver& S, vec<Lit>& lits) {
    int     parsed_lit, var;
    lits.clear();
    for (;;){
        parsed_lit = parseInt(in);
        if (parsed_lit == 0) break;
        var = abs(parsed_lit)-1;
		//***********
    //print var's value , make sure the understanding..
        while (var >= S.nVars()) S.newVar();
        lits.push( (parsed_lit > 0) ? mkLit(var) : ~mkLit(var) );
    }
}

//----2017.12.18-------
the way to input the CNF formula
in readClause function
static void readClause(B& in, Solver& S, vec<Lit>& lits) {
    int     parsed_lit, var;
    lits.clear();
    for (;;){
		//*****usage: send all literal to parsed_lit one by one, send "0" at last******
        parsed_lit = parseInt(in);
        if (parsed_lit == 0) break; // the end of line has "0". when meet it, break.
        var = abs(parsed_lit)-1;
		//*****
        while (var >= S.nVars()) S.newVar();
        lits.push( (parsed_lit > 0) ? mkLit(var) : ~mkLit(var) );
    }
}

in main functions. we can write the answer
//********************************************
if (ret == l_True){
  printf("***************SAT Solutin**************\n");
  for (int i = 0; i < S.nVars(); i++) {
    if (S.model[i] != l_Undef) {
      int out = (S.model[i]==l_True)? 1 : 0;
      printf("%d ",out);
    }
  }
  printf("\n");
}
else if (ret == l_False){
    printf("***************UNSAT***************\n");
}
//********************************************



*****TODO******still undone
//2018.1.27
TO DO:
verify the result of glucose in S27
link to circuit by XOR, and put it into SAT-solver
write the program for SIS

// 2018.1.30
TO DO:
link the output with XOR(circuit.h --> function oriXORFaulty)

// 2018.3.7
temp: generate vector oriAndFauCircuit
keeping: generate CNFFormula oriAndFauCNF
insert and delete fault in oriAndFauCNF

// 2018.3.8
// check the CNF formula correct or not?

// 2018.3.13
// ****** Find all redundant SSAF. But it's different from what sis found ????******
// check all AIG's input???? maybe incorrect??????
// need to propagate the input values and see what will happen
// ****start to do the verification******

// 2018.3.14
// ****first read the paper about the fault collapsing. First task in 2018.3.15
// should I consider the output's stuck-at 1? Since it cannot be replace by input's stuck at values
// meaning of fault ID should be changed->also include the gate outputs.!
// we should change it to that faults can be inserted to any place-->still some problem 2018.3.15

// another idea to verify the fault model:
// use the fault model to generate the test patterns for these faults.
// and again, check whether these test vectors can cover all faults.(all faults without collapsing)


// ************2018.3.30*****************
// 1. s444 fault 1101's test pattern can detect 1268, but the sat function said no.. The SAT function may have some problems(has checked in quartus)
// need to check the generation of sat(maybe we can compare it to sis. use some other small circuit to try).
// s382 has the same problem. fault 474 can be detected. however SAT-solver say not..
// ************already use sis check. s382 has no redundant faults. so the SAT function has problem. please check s382's CNF manully(check s27 first, then switch to big circuit) first************
// ************(SAT solver's part are quit important. we need to use it again and again later)************

**********************
case 1. my CNF generation has problems
  1. check the original+faulty Circuit's generation.
~~~~~~only check the corresponding gates~~~~~~about 20 gates....
******Find the problem!!!--->dont consider invOut when generate the CNF formula!!!!!*****

-------2018.4.11-------------
check fault 1252, is unsat, but the samefault_helper take it as non-redundant fault. find the reason.
***方法有问题

  2. If 1 has no problem, check the CNF has problem or not? compare with abc's CNF
case 2. glucose may has problem. can use s444 blif file to test. XXX. glucose has no problem. already proof it.
if glucose has no problem. then can print out its CNF formula and compare with my formula?
**********************


*******change the gate implementation such that it can support any number of input and any kinds of gate*********
***In and out's wire name of PI and PO are same, it should be changed****8



// 2. s1238 has same problem. But different. it's problem is the collapse function ...(both propagate fault and sat said, no. but it still select by our function.)
// our method is fast, but still need to check (findFaultsSameTest_helper??)
