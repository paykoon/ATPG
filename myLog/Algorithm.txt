1. For redundant fault, check all the faults in the circuit to obtain all redundant faults.
then check:
two redundant fault(if they are in the same path??)
only one redundant fault:


2. For the faults the are selected...


Procedure:
1. Generate the fault list
2. Check the propagation path of all faults
method 1) Check the link list(but some fault may be redundant and we cannot find them)
method 2) Generate patterns for all faults, then check the path of selected fault.
          After that, we can get the undetected fault list
	  Then we can find the redundant faults in this way
	(******This can be improved, use a simple way to find the path*******)
method 3) Given the initial single test, use this test set to check the path of all faults.
method 4) find the path by backtrace method podem, if podem cannot find, then use the initial test patterns to check them, if still not, use SAT-solver to check whether it's redundant or not.
****????other feasible method to find the path??********
Anyway, we can get the undetected fault list after this procedure.

3. For the redundant faults
how sis find the redundant fault, maybe we can combine with them?**********
Anyway, we need to get all redundant faults
1) When find the undetected DSA, all the redundant faults should be checked.
one kinds of redundant fault is the selected fault, it will be checked.
another kind of the redundant fault is other faults.
When we check the selected fault, the selected fault should have a STL to store the path
then we can inspect whether the redundant fault lies on the propagation path.
If so, check whether they will block the propagation path or not-->This may be work

2) Check the all two redundant combinations.(may not so much)


*********Propagation path based method************
//comparing with the way based on the single test set, the below method will be much efficient because we dont need to do many SAT.
Randomly select a path (or not random, but first PI path, last PI path, second PI path, last second PI path..by this sequence, consider a sequence to containing more faults)
find its side value(path),
-->How to find a path? Generate test patterns for the faults located in primary inputs. Find the path based on those test patterns.
find which faults(PI&fanout) lies on it
find which faults will block the path(check the problem, ensure how to find those faults????????)
each gate has flag to mark its fault(dont search the entire fault table, it will be time-consuming, just check each gate's fault flag, mark it to avoid the double checking).
delete the faults included in the above propagation path(but not the block ones).
Then randomly select another path by the above procedure, repeat the above procedure.
until no faults remain. Or if the faults' number is smaller than ???? some percent, then check them one by one????????
Or if all the faults in input wire are checked(path generation), then checking the remaining fault one by one
(do the experiment to ensure how many faults remain in fact).


???How to find the propagation path!!!????
????How redundant fault
Big proble


Amir:
Before do the fault simulation to find the path, do some optimization to decrease the time.
What kind of optimization?????
Use internal CNFGenerator to produce the cnf, then send it to Glucose to do the SAT.
----------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------2017.11.28------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
1. Experiment1:
If we generate the test patterns by ourself, and then find the path, it seems like we dont need other test set. We can already generate the test patterns by ourself.
step 1) generate test patterns for the fault in PI, find its path and other faults located in this path, then find the violated faults(undetected DSA).
        repeat the above processing until no SSA faults remain.
step 2) after the step 1), we already generate enough test patterns for SSA faults. And we get the DSA fault list.
        Then we can generate the additional test patterns for the DSA faults.
        ????Details of implementation are still needed to be considered.

2. Experiment2:
Make use of the existing test patterns to find the propagation path.
Maybe naive:
first find a PI, traverse the test set to find the pattern to detect it.
Then similar to the above method, find its propagation path, and the fault in the path can already be detected by the test patterns.
And we can also find the undetected fault in this process.
Repeat until all single faults are covered.
*********???Maybe our method is not suitable to use other provided test patterns. Because we dont know the relationship between the fault and test patterns.

In addition:
Other than use ABC to verify the coverage, we can do it by ourself without calling SAT-solver.
Just simulate the circuit, and for each DSA faults, traverse the test set to find whether some patterns can detect them or not.
Until all fautls are covered.
(If our proposed ATPG implementation are feasible, we can also use the proposed method to check the some given test set's coverage and reduce the processing time).

****************Attentions: Still need to fully understand the previous program and make sure some details*****************


2017.3.19
Generate test patterns for single faults
1. while (collapsed faults list is still not empty && some collapsed faults in PI is still unchecked) {
  1) select a fault in PI, generate its test pattern
  2) analyzed it's propagation path, from the path we can also find which faults can be detected by this test patterns (****check the ratio***)
  (needs a. revise the original circuit to fault, and reset the fault circuit to original one --->  Done**
         b. the function to propagate input value to the entire circuit   --->  Done**
         c. find the faults propagation path as well --> Done **
  noticed: the way we pick fault is first PI, last PI, second PI, second last PI etc.
}
2. if still some faults remains, generate test patterns for them one by one(*****first need to check their number*******)

2017.3.26
new bug
1. the redundant faults is different from sis. check it
2. the collapse and generation of SSAF will overlook some redundant fault. check it why.
maybe it's better to directly check whether the test pattern can detect other faults. but not check the path????
check its time.
use a small circuit to check faulty-out's function is correct or not???..


2017.3.29....
give up generate SSAF by ourself..just to big.
use other's initial patterns.

2017.4.17
我们这种在一条路径上找同样可以覆盖的SSAF方式行不通，因为，有些fault有fanout recovergence,
这些fault 会对后面的fault的side value有影响，看上去后面的fault似乎是可以用一样的test pattern检测出这些fault的，
但是实际上后面fault的side value 可能是被前面的fault 给影响了才能pass， 这些后面的faults 原本可能是reduundant.
所以放弃这种方式。

所以接下来的方法就是，
1. 用我们的propagate fault的方程来看那些fault 对应那些pattern,只能这样子。
2. 找出undetected DSA

有些DSA可以不check,看之前的笔记。

6.1
